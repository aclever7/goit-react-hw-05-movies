{"version":3,"file":"static/js/180.ba87b6d3.chunk.js","mappings":"kTAIaA,EAAU,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACxB,OACE,SAAC,KAAD,CACEC,WAAW,aACXC,WAAYF,EACZG,WAAY,YAA0C,IAAvCC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,QAC/BC,EAAuB,OAAdF,QAAc,IAAdA,GAAAA,EAAgBG,YACf,OAAdH,QAAc,IAAdA,GAAAA,EAAgBG,YAAYC,SAAS,aACnCJ,EAAeG,YAAYE,MAAM,GADnC,0CAGqCL,EAAeG,cAGpD,SAACG,EAAA,EAAD,IAGF,OACE,SAAC,UAAD,WACE,SAAC,eAAD,CACEJ,QAAQ,SAAC,IAAD,CAAQK,IAAKL,IACrBM,OAAO,cAAGC,KAAK,qBAAR,SAA8BV,IACrCW,YAAaT,KAJDF,EAQnB,GAGN,E,UCzBYY,EAAe,WAC1B,OAAwCC,EAAAA,EAAAA,YAAxC,eAAOjB,EAAP,KAAqBkB,EAArB,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEIH,GAAW,GAFf,SAG0BI,EAAAA,GAAyBH,GAHnD,OAGUI,EAHV,OAKIP,EAAgBO,EAAQC,SACxBN,GAAW,GANf,gDAQIA,GAAW,GACXF,EAAgB,MATpB,0DADc,uBAAC,WAAD,wBAadS,EACD,GAAE,CAACN,KAGF,UAACO,EAAA,EAAD,WACGT,IACC,SAACU,EAAA,EAAD,CACEC,MAAO,CAAEC,SAAU,GAAIC,QAAS,OAAQC,eAAgB,UACxDC,MAAI,IAGkB,KAAb,OAAZlC,QAAY,IAAZA,OAAA,EAAAA,EAAcmC,SAAkBnC,GAC/B,SAACD,EAAD,CAASC,aAAcA,KAEtBmB,IAAW,sEAInB,C,4MCzCKiB,EAAM,mCAEZC,IAAAA,SAAAA,QAAyB,8BAElB,IAAMC,EAAiB,mCAAG,WAAMC,GAAN,gFAC1BA,IAAMA,EAAO,GADa,SAEbF,IAAAA,IAAA,qCAAwCD,EAAxC,iBAAoDG,IAFvC,cAEzBC,EAFyB,OAGzBC,EAASD,EAAIE,KAHY,kBAIxBD,GAJwB,2CAAH,sDAOjBE,EAAY,mCAAG,WAAMC,GAAN,yFACRP,IAAAA,IAAA,kBACLO,EADK,oBACeR,EADf,+BADQ,cACpBI,EADoB,OAIpBK,EAAQL,EAAIE,KAJQ,kBAKnBG,GALmB,2CAAH,sDAQZC,EAAiB,mCAAG,WAAMF,GAAN,yFACbP,IAAAA,IAAA,kBAAqBO,EAArB,4BAAiDR,IADpC,cACzBI,EADyB,OAEzBO,EAAOP,EAAIE,KAFc,kBAGxBK,GAHwB,2CAAH,sDAMjBC,EAAoB,mCAAG,WAAMJ,GAAN,yFAChBP,IAAAA,IAAA,kBAAqBO,EAArB,4BAAiDR,IADjC,cAC5BI,EAD4B,OAE5Bf,EAAUe,EAAIE,KAFc,kBAG3BjB,GAH2B,2CAAH,sDAMpBwB,EAAe,mCAAG,WAAOC,EAAOX,GAAd,yFACXF,IAAAA,IAAA,iCACUD,EADV,kBACuBc,EADvB,4CACgEX,IAFrD,cACvBC,EADuB,OAIvBC,EAASD,EAAIE,KAJU,kBAKtBD,GALsB,2CAAH,uD","sources":["components/MovieReviews/Reviews/Reviews.jsx","components/MovieReviews/MovieReviews.jsx","service/Api.js"],"sourcesContent":["import { UserOutlined } from '@ant-design/icons';\nimport { Avatar, List } from 'antd';\nimport PropTypes from 'prop-types';\n\nexport const Reviews = ({ reviewsMovie }) => {\n  return (\n    <List\n      itemLayout=\"horizontal\"\n      dataSource={reviewsMovie}\n      renderItem={({ author, author_details, content }) => {\n        const avatar = author_details?.avatar_path ? (\n          author_details?.avatar_path.includes('/https://') ? (\n            author_details.avatar_path.slice(1)\n          ) : (\n            `https://image.tmdb.org/t/p/w500/${author_details.avatar_path}`\n          )\n        ) : (\n          <UserOutlined />\n        );\n\n        return (\n          <List.Item key={author}>\n            <List.Item.Meta\n              avatar={<Avatar src={avatar} />}\n              title={<a href=\"https://ant.design\">{author}</a>}\n              description={content}\n            />\n          </List.Item>\n        );\n      }}\n    />\n  );\n};\n\nReviews.propTypes = {\n  reviewsMovie: PropTypes.arrayOf(\n    PropTypes.shape({\n      author: PropTypes.string.isRequired,\n      author_details: PropTypes.object,\n      content: PropTypes.string.isRequired,\n    }).isRequired\n  ),\n};\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport * as API from '../../service/Api';\nimport { Container } from 'components/Container/Container';\nimport { Reviews } from './Reviews/Reviews';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nexport const MovieReviews = () => {\n  const [reviewsMovie, setReviewsMovie] = useState();\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchCast() {\n      try {\n        setLoading(true);\n        const reviews = await API.getReviewsOfTheMovie(movieId);\n\n        setReviewsMovie(reviews.results);\n        setLoading(false);\n      } catch {\n        setLoading(false);\n        setReviewsMovie(null);\n      }\n    }\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <Container>\n      {loading && (\n        <LoadingOutlined\n          style={{ fontSize: 36, display: 'flex', justifyContent: 'center' }}\n          spin\n        />\n      )}\n      {reviewsMovie?.length !== 0 && !!reviewsMovie ? (\n        <Reviews reviewsMovie={reviewsMovie} />\n      ) : (\n        !loading && <p>We don`t have any reviews for this movie</p>\n      )}\n    </Container>\n  );\n};\n","import axios from 'axios';\n\nconst KEY = '907d92356ea975d8c4e764d27999a432';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/';\n\nexport const getTrandingMovies = async page => {\n  if (!page) page = 1;\n  const res = await axios.get(`3/trending/all/day?api_key=${KEY}&page=${page}`);\n  const movies = res.data;\n  return movies;\n};\n\nexport const getMovieById = async movie_id => {\n  const res = await axios.get(\n    `3/movie/${movie_id}?api_key=${KEY}&append_to_response=videos`\n  );\n  const movie = res.data;\n  return movie;\n};\n\nexport const getCastOfTheMovie = async movie_id => {\n  const res = await axios.get(`3/movie/${movie_id}/credits?api_key=${KEY}`);\n  const cast = res.data;\n  return cast;\n};\n\nexport const getReviewsOfTheMovie = async movie_id => {\n  const res = await axios.get(`3/movie/${movie_id}/reviews?api_key=${KEY}`);\n  const reviews = res.data;\n  return reviews;\n};\n\nexport const getMovieByQuery = async (query, page) => {\n  const res = await axios.get(\n    `3/search/movie?api_key=${KEY}&query=${query}&page=1&include_adult=false&page=${page}`\n  );\n  const movies = res.data;\n  return movies;\n};\n"],"names":["Reviews","reviewsMovie","itemLayout","dataSource","renderItem","author","author_details","content","avatar","avatar_path","includes","slice","UserOutlined","src","title","href","description","MovieReviews","useState","setReviewsMovie","loading","setLoading","movieId","useParams","useEffect","API","reviews","results","fetchCast","Container","LoadingOutlined","style","fontSize","display","justifyContent","spin","length","KEY","axios","getTrandingMovies","page","res","movies","data","getMovieById","movie_id","movie","getCastOfTheMovie","cast","getReviewsOfTheMovie","getMovieByQuery","query"],"sourceRoot":""}